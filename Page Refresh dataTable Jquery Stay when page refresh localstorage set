Focus on element after page refresh
-----------------------------------

    <script>
    // Function to scroll to a specific element and focus on it
    function focusOnElement() {


        // Select the tbody element
        var tbody = document.querySelector('.dataTable tbody');

        // Get all <tr> elements within the tbody
        var rows = tbody.querySelectorAll('tr');
        console.log('rows', rows)
        var saveButton;
        // Loop through each <tr> and do something with it
        rows.forEach(function (row) {
            // You can access row properties here
            console.log(row);

            // For example, to get the ID of the save button in each row
            saveButton = row.querySelector('a.btn-success');
            if (saveButton) {
                
                saveButton = saveButton.id;
            }
        });
        console.log('save button id', saveButton)

        var element = document.getElementById(saveButton); // No '#' needed
        if (element) {
            element.scrollIntoView();
            element.focus();
        }
    }

    // Check if there is a stored position for the specific element
    var storedPosition = sessionStorage.getItem('elementPosition');
    if (storedPosition) {
        window.scrollTo(0, storedPosition); // Scroll to the stored position
    }

    // Store the current scroll position when the page unloads
    window.addEventListener('beforeunload', function () {
        var currentPosition = window.scrollY;
        sessionStorage.setItem('elementPosition', currentPosition);
    });

    // Add click event listeners to focus on the specific element
    document.addEventListener('click', function (event) {
        if (event.target.closest('#saveButton')) { // Only focus if clicking on the specific element
            focusOnElement();
        }
    });

    // Focus on the element after the page is loaded
    window.addEventListener('load', function () {
        focusOnElement();
    });
</script>


To stay pagination in dataTable 
-------------------------------------


<script>

$(document).ready(function () {
    debugger;
    DisplayUser();
})
function DisplayUser() {
    var table = $(".dataTable").DataTable({
        bLengthChange: true,
        lengthMenu: [[5, 10, 15, -1], [5, 10, 15, "All"]],
        bFilter: true,
        bSort: true,
        bPaginate: true,
        responsive: true,
        bDestroy: true,
        // Store the state (including pagination) in session storage
        stateSave: true,
        pagingType: 'full_numbers' // Optional for better pagination controls
    });

    // Check for stored page number on page load
    var storedPage = sessionStorage.getItem('selectedPage');
    if (storedPage) {
        // Move to the stored page
        table.page(parseInt(storedPage) - 1).draw(false);
    }
}

// Function to handle pagination click
function handlePaginationClick(event) {
    // Ensure the click is on a pagination link
    if (event.target.classList.contains('paginate_button')) {
        // Get the clicked page number from the link text
        var pageNumber = event.target.textContent.trim();
        sessionStorage.setItem('selectedPage', pageNumber);
        updatePaginationClasses(pageNumber);
    }
}

// Function to update pagination classes based on the selected page
function updatePaginationClasses(selectedPage) {
    var paginationLinks = document.querySelectorAll('.paginate_button');
    paginationLinks.forEach(function (link) {
        if (link.textContent.trim() === selectedPage) {
            link.classList.add('current');
            link.setAttribute('aria-current', 'page');
        } else {
            link.classList.remove('current');
            link.removeAttribute('aria-current');
        }
    });
}

// Add click event listeners to pagination links after DataTable initialization
window.addEventListener('load', function () {
    DisplayUser(); // Initialize DataTable
    document.querySelectorAll('.paginate_button').forEach(function (link) {
        link.addEventListener('click', handlePaginationClick);
    });
});
</script>
<script>
   // Function to handle pagination click
   function handlePaginationClick(event) {
       // Ensure the click is on a pagination link
       if (event.target.classList.contains('paginate_button')) {
           // Get the clicked page number from the link text
           var pageNumber = event.target.textContent.trim();

           // Store the clicked page number in sessionStorage
           sessionStorage.setItem('selectedPage', pageNumber);

           // Update pagination classes
           updatePaginationClasses(pageNumber);
       }
   }

   // Function to update pagination classes based on the selected page
   function updatePaginationClasses(selectedPage) {
       var paginationLinks = document.querySelectorAll('.paginate_button');

       paginationLinks.forEach(function (link) {
           // Check if the link text matches the selected page
           if (link.textContent.trim() === selectedPage) {
               link.classList.add('current');
               link.setAttribute('aria-current', 'page');
           } else {
               link.classList.remove('current');
               link.removeAttribute('aria-current');
           }
       });
   }

   // Check for the stored page number on page load
   window.addEventListener('load', function () {
       var storedPage = sessionStorage.getItem('selectedPage');
       if (storedPage) {
           updatePaginationClasses(storedPage);
       }
   });

   // Add click event listeners to pagination links
   document.querySelectorAll('.paginate_button').forEach(function (link) {
       link.addEventListener('click', handlePaginationClick);
   });
</script>
